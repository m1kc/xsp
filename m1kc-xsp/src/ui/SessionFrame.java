/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on 21.01.2011, 1:22:40
 */

package ui;

import java.awt.*;
import java.awt.event.*;
import java.awt.image.*;
import java.io.*;
import java.util.logging.*;
import javax.imageio.*;
import javax.sound.sampled.*;
import javax.swing.*;
import xsp.*;

/**
 *
 * @author m1kc
 */
public class SessionFrame extends javax.swing.JFrame implements XSPConstants, UIProxy
{

    Session session;
    DataInputStream fis,vis,sis;
    DataOutputStream os,fos,vos,sos;

    long traffic = 0;
    long pingTime = 0;
    String term = "";
    NetSound netSound;
    static Robot robot;
    BufferedImage screen;

    /** Creates new form MainFrame */
    public SessionFrame()
    {
        initComponents();
        setSize(Toolkit.getDefaultToolkit().getScreenSize().width/2, Toolkit.getDefaultToolkit().getScreenSize().height/2);
        if (getWidth()<900) setSize(900, getHeight());
        if (getHeight()<450) setSize(getWidth(), 450);
        setLocationRelativeTo(null);
        try {
            robot = new Robot();
        } catch (AWTException ex) {
            Logger.getLogger(SessionFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void init(Session session)
    {
        this.session = session;
        this.fis = session.fis;
        this.vis = session.vis;
        this.os = session.os;
        this.fos = session.fos;
        this.vos = session.vos;
        this.sis = session.sis;
        this.sos = session.sos;
        netSound = new NetSound();
        netSound.outputStream = vos;
        netSound.inputStream = vis;
    }

    public SessionFrame getThis()
    {
        return this;
    }

    public static void playSoundFromResource(final String filename) {
        new Thread(){
            @Override
            public void run()
            {
                try {
                    AudioInputStream ais = AudioSystem.getAudioInputStream(new BufferedInputStream(SessionFrame.class.getResourceAsStream(filename)));
                    SourceDataLine sourceDataLine = AudioSystem.getSourceDataLine(ais.getFormat());
                    sourceDataLine.open(ais.getFormat());
                    sourceDataLine.start();
                    int n;
                    byte[] b = new byte[4096];
                    while(true)
                    {
                        n = ais.read(b);
                        if (n==-1) break;
                        sourceDataLine.write(b, 0, n);
                    }
                    sourceDataLine.drain();
                    ais.close();
                } catch (Throwable ex) {
                    Logger.getLogger(SessionFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }.start();
    }

    public static String bestSize(long size)
    {
        if (size<1024L*10L) return ""+size+" байт";
        if (size>=1024L*1024L*1024L*10L) return ""+size/(1024L*1024L*1024L)+" Гб";
        if (size>=1024L*1024L*10L) return ""+size/(1024L*1024L)+" Мб";
        return ""+size/1024L+" Кб";
    }

    public static byte[] getScreen(Rectangle r)
    {
        final ByteString bs = new ByteString();
        OutputStream s = new OutputStream() {
            @Override
            public void write(int b) throws IOException
            {
                bs.append(new byte[]{(byte)b});
            }

            @Override
            public void write(byte[] b)
            {
                bs.append(b);
            }
        };

        BufferedImage ss;
        if (r==null) ss = robot.createScreenCapture(new Rectangle(Toolkit.getDefaultToolkit().getScreenSize()));
        else ss = robot.createScreenCapture(r);

        try {
            ImageIO.write(ss, "GIF", s);
        } catch (IOException ex) {
            Logger.getLogger(SessionFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        return bs.byteString;
    }

    public static Image makeGoodImage(Image i)
    {
        return new ImageIcon(i).getImage();
    }

    public void updateCounter()
    {
        jLabel11.setText("Трафик: "+bestSize(traffic));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jCheckBox5 = new javax.swing.JCheckBox();
        jLabel11 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jProgressBar2 = new javax.swing.JProgressBar();
        jPanel14 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jButton11 = new javax.swing.JButton();
        jCheckBox2 = new javax.swing.JCheckBox();
        jButton14 = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jPanel12 = new javax.swing.JPanel();
        jCheckBox3 = new javax.swing.JCheckBox();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("XSP 1.0");

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/ping.png"))); // NOI18N
        jButton1.setText("Ping");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/caps.png"))); // NOI18N
        jButton6.setText("Проверить возможности");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jCheckBox5.setSelected(true);
        jCheckBox5.setText("Журналировать все пакеты");

        jLabel11.setText("Трафик: N/A");
        jLabel11.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 726, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBox5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 116, Short.MAX_VALUE)
                        .addComponent(jButton6)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton6)
                    .addComponent(jCheckBox5)
                    .addComponent(jLabel11))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Общее ", new javax.swing.ImageIcon(getClass().getResource("/image/logs.png")), jPanel1); // NOI18N

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/connect.png"))); // NOI18N
        jButton2.setText("Отправить");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea4.setColumns(20);
        jTextArea4.setEditable(false);
        jTextArea4.setLineWrap(true);
        jTextArea4.setRows(5);
        jTextArea4.setWrapStyleWord(true);
        jScrollPane2.setViewportView(jTextArea4);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 726, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 604, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Чат ", new javax.swing.ImageIcon(getClass().getResource("/image/messaging.png")), jPanel2); // NOI18N

        jTextArea2.setBackground(new java.awt.Color(1, 1, 1));
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Monospaced", 0, 13));
        jTextArea2.setForeground(new java.awt.Color(204, 204, 204));
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(5);
        jTextArea2.setWrapStyleWord(true);
        jTextArea2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextArea2KeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(jTextArea2);

        jTabbedPane1.addTab("Терминал ", new javax.swing.ImageIcon(getClass().getResource("/image/terminal.png")), jScrollPane3); // NOI18N

        jPanel5.setLayout(new java.awt.GridLayout(0, 2));

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Прием"));

        jLabel1.setText("Папка для приема файлов:");

        jTextField3.setText("/home/m1kc/");

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/folder.png"))); // NOI18N
        jButton7.setText("Обзор...");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Принимать файлы");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7))
                    .addComponent(jCheckBox1))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox1)
                .addContainerGap(57, Short.MAX_VALUE))
        );

        jPanel5.add(jPanel6);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Передача"));

        jLabel2.setText("Передать файл:");

        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/file.png"))); // NOI18N
        jButton8.setText("Обзор...");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/connect.png"))); // NOI18N
        jButton9.setText("Передать");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel3.setText("Файл не выбран");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(jTextField4, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton8))
                    .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton9)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanel5.add(jPanel7);

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Ход приема"));

        jLabel5.setText("Нет активности");

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar2, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                    .addComponent(jLabel5))
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(89, Short.MAX_VALUE))
        );

        jPanel5.add(jPanel13);

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder("Ход передачи"));

        jLabel4.setText("Нет активности");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                    .addComponent(jLabel4))
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(89, Short.MAX_VALUE))
        );

        jPanel5.add(jPanel14);

        jTabbedPane1.addTab("Файлы ", new javax.swing.ImageIcon(getClass().getResource("/image/files.png")), jPanel5); // NOI18N

        jPanel8.setLayout(new java.awt.GridLayout(0, 2));

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Микрофон (односторонняя связь)"));

        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/broadcast.png"))); // NOI18N
        jButton11.setText("Начать вещание");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jCheckBox2.setSelected(true);
        jCheckBox2.setText("Принимать входящий звук");

        jButton14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/endbroadcast.png"))); // NOI18N
        jButton14.setText("Прервать вещание");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jButton11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton14))
                    .addComponent(jCheckBox2))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton11)
                    .addComponent(jButton14))
                .addContainerGap(80, Short.MAX_VALUE))
        );

        jPanel8.add(jPanel9);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Настройки"));

        jLabel7.setText("Частота:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1000", "2000", "4000", "8000", "11025", "16000", "22050", "44100" }));
        jComboBox1.setSelectedIndex(2);

        jLabel8.setText("Бит:");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "8", "16" }));

        jCheckBox4.setText("Стерео");

        jLabel9.setText("Буфер:");

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Определяется JVM", "1", "250", "500", "1000", "2000" }));

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, 0, 265, Short.MAX_VALUE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox2, 0, 297, Short.MAX_VALUE))
                    .addComponent(jCheckBox4)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox3, 0, 280, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel8.add(jPanel10);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Диалог"));

        jCheckBox3.setSelected(true);
        jCheckBox3.setText("Принимать входящие звонки");

        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/call.png"))); // NOI18N
        jButton12.setText("Начать диалог");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/endcall.png"))); // NOI18N
        jButton13.setText("Прервать диалог");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox3)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jButton12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton13)))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton12)
                    .addComponent(jButton13))
                .addContainerGap(80, Short.MAX_VALUE))
        );

        jPanel8.add(jPanel12);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Статус"));

        jLabel6.setText("Нет активности");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addContainerGap(239, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addContainerGap(127, Short.MAX_VALUE))
        );

        jPanel8.add(jPanel11);

        jTabbedPane1.addTab("Голосовая связь ", new javax.swing.ImageIcon(getClass().getResource("/image/calls.png")), jPanel8); // NOI18N

        jCheckBox6.setSelected(true);
        jCheckBox6.setText("Разрешить управление этим компьютером");
        jCheckBox6.setEnabled(false);

        jCheckBox7.setText("Контролировать мышь");

        jButton15.setText("Начать отдачу экрана");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jButton16.setText("Начать прием");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jLabel10.setBackground(new java.awt.Color(255, 255, 255));
        jLabel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel10MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel10MouseReleased(evt);
            }
        });
        jLabel10.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jLabel10MouseMoved(evt);
            }
        });

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox7)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addComponent(jCheckBox6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton16))
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(133, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox6)
                    .addComponent(jButton15)
                    .addComponent(jButton16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(151, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Управление ", new javax.swing.ImageIcon(getClass().getResource("/image/logs.png")), jPanel15); // NOI18N

        jTextArea3.setColumns(20);
        jTextArea3.setEditable(false);
        jTextArea3.setLineWrap(true);
        jTextArea3.setRows(5);
        jTextArea3.setText("XSP 1.0 - eXtensible socket-based protocol\n(c) m1kc project & TomClaw Software, 2011\nВсе права защищены.\n\n= Справка по вкладкам =\n\nОбщее - сюда выводятся диагностические сообщения. Здесь же можно выполнить PING и CAPSCHECK.\n\nЧат - он и в Африке чат. Окошко, кстати, всплывает при входящем сообщении.\n\nТерминал - совместное редактирование текста (при изменении содержимого терминала на одном компьютере оно меняется и на другом).\n\nФайлы - прием/передача файлов по протоколу DirectTransfer™.\n\nГолосовая связь - переговоры или вещание звука с использованием микрофона (протокол SolkinVoiceStreaming™).\n\nУправление - удаленное управление компьютером.");
        jTextArea3.setWrapStyleWord(true);
        jScrollPane4.setViewportView(jTextArea3);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 726, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("О программе ", new javax.swing.ImageIcon(getClass().getResource("/image/about.png")), jPanel4); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 762, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        doPing();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        sendMessage(jTextField1.getText());
        jTextField1.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        if (evt.getKeyChar()=='\n') jButton2ActionPerformed(null);
    }//GEN-LAST:event_jTextField1KeyPressed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        Sender.sendPack(os, CAPSCHECK, ASK, this);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        Main.od.openDir(jTextField3);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        Main.od.openFile(jTextField4, jLabel3);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        sendFileRq();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        sendMicrophoneRq();
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        netSound.mustStopOutput = true;
        sendMicrophoneStop();
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        netSound.mustStopOutput = true;
        netSound.mustStopInput = true;
        sendDialogStop();
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        sendDialogRq();
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jTextArea2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea2KeyReleased
        updateTerminal();
}//GEN-LAST:event_jTextArea2KeyReleased

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        //updateScreen(null);
        new ScreenStreaming().startStreaming(sos);
        if (true) return;
        new Thread(){
            @Override
            public void run()
            {
                final int w = Toolkit.getDefaultToolkit().getScreenSize().width;
                final int h = Toolkit.getDefaultToolkit().getScreenSize().height;
                final int sx = w/4;
                final int sy = h/4;
                while(true)
                {
                    long start = System.currentTimeMillis();
                    for (int i=0; i<w; i+=sx)
                        for (int j=0; j<h; j+=sy)
                            updateScreen(new Rectangle(i,j,sx,sy));
                    long ago = System.currentTimeMillis() - start;
                    System.out.println(ago);
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(SessionFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }.start();
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jLabel10MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MousePressed
        if (jCheckBox7.isSelected()) sendMouse(evt.getX(),evt.getY(),"PRESS",evt.getButton());
    }//GEN-LAST:event_jLabel10MousePressed

    private void jLabel10MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseReleased
        if (jCheckBox7.isSelected()) sendMouse(evt.getX(),evt.getY(),"RELEASE",evt.getButton());
    }//GEN-LAST:event_jLabel10MouseReleased

    private void jLabel10MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseMoved
        if (jCheckBox7.isSelected()) sendMouse(evt.getX(),evt.getY());
    }//GEN-LAST:event_jLabel10MouseMoved

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        new ScreenStreaming().startReceiving(sis, this);
    }//GEN-LAST:event_jButton16ActionPerformed

    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JProgressBar jProgressBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    public javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
// </editor-fold>

    // Всякая фигня

    public void log(String string) {
        jTextArea1.setText(jTextArea1.getText()+string+"\n");
    }

    public void chat(String s, boolean incoming)
    {
        String buf = jTextArea4.getText();
        buf+=(incoming?">> ":"<< ");
        buf += s;
        buf += "\n";
        jTextArea4.setText(buf);
    }

    // Собственные функции

    public void doPing()
    {
        log("Trying to ping...");
        pingTime = System.currentTimeMillis();
        Sender.sendPack(os, PING, CALL, this);
    }

    public void sendMessage(String s)
    {
        chat(s,false);
        Sender.sendPack(os, MESSAGE, UNKNOWN, s, null, this);
    }

    public void updateTerminal()
    {
        String newTerm = jTextArea2.getText();
        int caret = jTextArea2.getCaretPosition();

        int delta = newTerm.length()-term.length();
        if (delta>0)
        {
            String diff = newTerm.substring(caret-delta, caret);
            Sender.sendPack(os, TERMINAL, ADD, new String[]{""+(caret-delta), diff}, null, this);
        }
        if (delta<0)
        {
            Sender.sendPack(os, TERMINAL, DEL, new String[]{""+caret, ""+(-delta)}, null, this);
        }
        if ((delta==0) && (newTerm.hashCode() != term.hashCode()))
        {
            Sender.sendPack(os, TERMINAL, FULL, new String[]{""+jTextArea2.getCaretPosition(), jTextArea2.getText()}, null, this);
        }

        term = newTerm;
    }

    public void sendFileRq()
    {
        File ff = new File(jTextField4.getText());
        Sender.sendPack(os, FILE, REQUEST, ff.getName(), null, this);
    }

    public void sendFile()
    {
        new Thread(){
            @Override
            public void run()
            {
                DirectTransfer.sendFile(jTextField4.getText(), fos, 0, getThis());
            }
        }.start();
    }

    public void receiveFile()
    {
        new Thread(){
            @Override
            public void run()
            {
                DirectTransfer.receiveFile(jTextField3.getText(), fis, getThis());
            }
        }.start();
    }

    public void sendMicrophoneRq()
    {
        netSound.sampleRate = Integer.parseInt(jComboBox1.getSelectedItem().toString());
        netSound.sampleSizeInBits = Integer.parseInt(jComboBox2.getSelectedItem().toString());
        netSound.channels = (jCheckBox4.isSelected() ? 2 : 1);
        try
        {
            netSound.buffer = Integer.parseInt(jComboBox3.getSelectedItem().toString());
        }
        catch (Throwable ex)
        {
            netSound.buffer = -1;
        }
        Sender.sendPack(os, MICROPHONE, REQUEST, new String[]{""+netSound.sampleRate,""+netSound.sampleSizeInBits,""+netSound.channels,""+netSound.buffer}, null, this);
    }

    public void sendDialogRq()
    {
        netSound.sampleRate = Integer.parseInt(jComboBox1.getSelectedItem().toString());
        netSound.sampleSizeInBits = Integer.parseInt(jComboBox2.getSelectedItem().toString());
        netSound.channels = (jCheckBox4.isSelected() ? 2 : 1);
        try
        {
            netSound.buffer = Integer.parseInt(jComboBox3.getSelectedItem().toString());
        }
        catch (Throwable ex)
        {
            netSound.buffer = -1;
        }
        Sender.sendPack(os, DIALOG, REQUEST, new String[]{""+netSound.sampleRate,""+netSound.sampleSizeInBits,""+netSound.channels,""+netSound.buffer}, null, this);
    }

    public void sendMicrophoneStop()
    {
        Sender.sendPack(os, MICROPHONE, STOP, this);
    }

    public void sendDialogStop()
    {
        Sender.sendPack(os, DIALOG, STOP, this);
    }

    public void startVoiceStreaming()
    {
        new Thread() {
            @Override
            public void run() {
                try {
                    netSound.inputSpeedLabel = jLabel6;
                    netSound.outputSpeedLabel = jLabel6;
                    //netSound.sampleRate = Integer.parseInt(jComboBox1.getSelectedItem().toString());
                    //netSound.sampleSizeInBits = Integer.parseInt(jComboBox2.getSelectedItem().toString());
                    //netSound.channels = (jCheckBox4.isSelected() ? 2 : 1);
                    netSound.broadcastUnformatData(netSound.getDefaultAudioFormat());
                } catch (IOException ex) {
                    Logger.getLogger(SessionFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (LineUnavailableException ex) {
                    Logger.getLogger(SessionFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }.start();
    }

    public void startVoiceListening()
    {
        new Thread() {
            @Override
            public void run() {
                try {
                    netSound.inputSpeedLabel = jLabel6;
                    netSound.outputSpeedLabel = jLabel6;
                    //netSound.sampleRate = Integer.parseInt(jComboBox1.getSelectedItem().toString());
                    //netSound.sampleSizeInBits = Integer.parseInt(jComboBox2.getSelectedItem().toString());
                    //netSound.channels = (jCheckBox4.isSelected() ? 2 : 1);
                    netSound.listenUnformatData(netSound.getDefaultAudioFormat());
                } catch (IOException ex) {
                    Logger.getLogger(SessionFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (LineUnavailableException ex) {
                    Logger.getLogger(SessionFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }.start();
    }

    public void sendMouse(int x,int y)
    {
        sendMouse(x,y,"",0);
    }

    public void sendMouse(int x,int y,String event,int mask)
    {
        Sender.sendPack(os, MOUSE, UNKNOWN, new String[]{""+x, ""+y, ""+event, ""+mask}, null, this);
    }

    public void updateScreen(Rectangle r)
    {
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        if (r==null) Sender.sendPack(os, SCREEN, UNKNOWN, new String[]{""+d.width,""+d.height,"full"}, getScreen(r), this);
        else Sender.sendPack(os, SCREEN, UNKNOWN, new String[]{""+d.width,""+d.height,"part",""+r.getX(),""+r.getY()}, getScreen(r), this);
    }

    // РЕАЛИЗАЦИЯ UIProxy ======================================================

    // Обработка пакетов

    public void logPack(boolean incoming, int type, int subtype, String[] utf, byte[] bytes)
    {
        traffic+=4; // тип - int, 4 bytes
        traffic+=4; // подтип - int, 4 bytes
        traffic+=4; // utf.length - int, 4 bytes
        if (utf != null) for (int i=0; i<utf.length; i++) traffic+=utf[i].length()*2;
        traffic+=4; // bytes.length - int, 4 bytes
        if (bytes != null) traffic+=bytes.length;
        updateCounter();

        if (type==TERMINAL) return;  // Забить
        if (type==MOUSE) return;     // Тем более забить
        if (type==SCREEN) return;    // Стопудово забить!
        if (jCheckBox5.isSelected())
        {
            StringBuilder z = new StringBuilder();
            if (incoming) z.append(">> "); else z.append("<< ");
            z.append("тип "+type+"; подтип "+subtype+"; UTF: ");
            if (utf==null) z.append("нет; ");
            else for (int i=0; i<utf.length; i++) z.append(utf[i]+"; ");
            z.append("байты: ");
            if (bytes==null) z.append("нет");
            else for (int i=0; i<bytes.length; i++) z.append((char)bytes[i]);
            log(z.toString());
        }
    }

    public void packReceived(int type, int subtype, String[] utf, byte[] bytes)
    {
        logPack(true, type, subtype, utf, bytes);        
    }

    public void packSent(int type, int subtype, String[] utf, byte[] bytes)
    {
        logPack(false, type, subtype, utf, bytes);
    }

    // Ошибки

    public void errorWhileSending(Throwable ex) {
        log("Ошибка при отправке пакета:");
        log(ex.toString());
    }

    // Обработка ошибочных пакетов

    public void errorUnknownType(int type, int subtype) {
        log("Неизвестный тип пакета: "+type);
        Sender.sendPack(os, SERVICE, UNKNOWN, "Unknown packet type", null, this);
    }

    // Обработка пакетов

    public void handleService(int subtype, String[] body, byte[] bytes)
    {
        for (int i=0; i<body.length; i++)
        {
            log("Сервисное сообщение: "+body[i]);
        }
    }

    public void handlePing(int subtype, String[] body, byte[] bytes) {
        switch(subtype)
        {
            case CALL:
                Sender.sendPack(os, PING, ANSWER, this);
                log("Командир, нас пингуют!");
                break;
            case ANSWER:
                long t = System.currentTimeMillis()-pingTime;
                log("Ping OK, time: "+t+" ms.");
                break;
            default:
                log("PING: What the...?");
                break;
        }
    }

    public void handleCapsCheck(int subtype, String[] body, byte[] bytes) {
        switch(subtype)
        {
            case ASK:
                Sender.sendPack(os, CAPSCHECK, TELL, CAPS, null, this);
                break;
            case TELL:
                log("Тип устройства: "+body[0]);
                log("Клиент: "+body[1]);
                log("Реализация: "+body[2]);
                log("Автор: "+body[3]);
                log("Поддерживаемые возможности:");
                for (int i=4; i<body.length; i++) log(body[i]);
                break;
            default:
                log("CAPSCHECK: What the...?");
                break;
        }        
    }
    
    public void handleMessage(int subtype, String[] body, byte[] bytes)
    {
        chat(body[0], true);
        jTabbedPane1.setSelectedIndex(1);
        this.setExtendedState(javax.swing.JFrame.NORMAL);
        this.toFront();
        this.requestFocus();
        jTextField1.requestFocus();
        playSoundFromResource("/sound/login.wav");
    }

    public void handleTerminal(int subtype, String[] body, byte[] bytes) {
        switch(subtype)
        {
            case FULL:
                int p = Integer.parseInt(body[0]);
                jTextArea2.setText(body[1]);
                jTextArea2.setCaretPosition(p);
                break;
            case ADD:
                int pp = Integer.parseInt(body[0]);
                jTextArea2.insert(body[1], pp);
                jTextArea2.setCaretPosition(pp+body[1].length());
                break;
            case DEL:
                int ppp = Integer.parseInt(body[0]);
                int ppp2 = Integer.parseInt(body[1]);
                jTextArea2.replaceRange("", ppp, ppp+ppp2);
                jTextArea2.setCaretPosition(ppp);
                break;
            default:
                log("TERMINAL: What the...?");
                break;
        }
        term = jTextArea2.getText();
    }

    public void handleFile(int subtype, String[] body, byte[] bytes) {
        switch(subtype)
        {
            case REQUEST:
                if (jCheckBox1.isSelected())
                {
                    Sender.sendPack(os, FILE, AGREE, body, null, this);
                    receiveFile();
                }
                else
                {
                    Sender.sendPack(os, FILE, DISAGREE, body, null, this);
                }
                break;
            case AGREE:
                sendFile();
                break;
            case DISAGREE:
                log("Передача отменена принимающим.");
                break;
            default:
                log("FILE: What the...?");
                break;
        }
    }

    public void handleMicrophone(int subtype, String[] body, byte[] bytes)
    {
        switch(subtype)
        {
            case REQUEST:
                log("Начат прием голоса, параметры: "+body[0]+" Гц, "+body[1]+" бит, каналов: "+
                body[2]+", размер буфера: "+(body[3].hashCode()=="-1".hashCode() ? "авто":body[3]));
                netSound.sampleRate = Float.parseFloat(body[0]);
                netSound.sampleSizeInBits = Integer.parseInt(body[1]);
                netSound.channels = (Integer.parseInt(body[2]));
                netSound.buffer = (Integer.parseInt(body[3]));
                startVoiceListening();
                if (jCheckBox2.isSelected()) Sender.sendPack(os, MICROPHONE, AGREE, this);
                else Sender.sendPack(os, MICROPHONE, DISAGREE, this);
                break;
            case AGREE:
                startVoiceStreaming();
                break;
            case DISAGREE:
                log("Собеседник отказался от приема голоса.");
                break;
            case STOP:
                log("Закончен прием голоса");
                netSound.mustStopInput = true;
                break;
            default:
                log("MICROPHONE: What the...?");
                break;
        }
    }

    public void handleDialog(int subtype, String[] body, byte[] bytes)
    {
        switch(subtype)
        {
            case REQUEST:
                log("Начат голосовой диалог, параметры: "+body[0]+" Гц, "+body[1]+" бит, каналов: "+
                body[2]+", размер буфера: "+(body[3].hashCode()=="-1".hashCode() ? "авто":body[3]));
                netSound.sampleRate = Float.parseFloat(body[0]);
                netSound.sampleSizeInBits = Integer.parseInt(body[1]);
                netSound.channels = (Integer.parseInt(body[2]));
                netSound.buffer = (Integer.parseInt(body[3]));
                startVoiceStreaming();
                startVoiceListening();
                if (jCheckBox2.isSelected()) Sender.sendPack(os, MICROPHONE, AGREE, this);
                else Sender.sendPack(os, MICROPHONE, DISAGREE, this);
                break;
            case AGREE:
                startVoiceStreaming();
                break;
            case DISAGREE:
                log("Собеседник отказался от диалога.");
                break;
            case STOP:
                log("Закончен голосовой диалог");
                netSound.mustStopInput = true;
                netSound.mustStopOutput = true;
                break;
            default:
                log("MICROPHONE: What the...?");
                break;
        }
    }

    public void handleMouse(int subtype, String[] body, byte[] bytes)
    {
        robot.mouseMove(Integer.parseInt(body[0]), Integer.parseInt(body[1]));
        if (body[2].hashCode()=="PRESS".hashCode())
        {
            int z = Integer.parseInt(body[3]);
            if (z==MouseEvent.BUTTON1) robot.mousePress(InputEvent.BUTTON1_MASK);
            if (z==MouseEvent.BUTTON2) robot.mousePress(InputEvent.BUTTON2_MASK);
            if (z==MouseEvent.BUTTON3) robot.mousePress(InputEvent.BUTTON3_MASK);
        }
        if (body[2].hashCode()=="RELEASE".hashCode())
        {
            int z = Integer.parseInt(body[3]);
            if (z==MouseEvent.BUTTON1) robot.mouseRelease(InputEvent.BUTTON1_MASK);
            if (z==MouseEvent.BUTTON2) robot.mouseRelease(InputEvent.BUTTON2_MASK);
            if (z==MouseEvent.BUTTON3) robot.mouseRelease(InputEvent.BUTTON3_MASK);
        }
    }

    public void handleScreen(int subtype, String[] body, byte[] bytes)
    {
        if (screen==null)
        {
            int w = (int) Double.parseDouble(body[0]);
            int h = (int) Double.parseDouble(body[1]);
            screen = new BufferedImage(w,h,BufferedImage.TYPE_INT_RGB);
        }

        if (body[2].hashCode()=="full".hashCode())
        {
            Image i = makeGoodImage(Toolkit.getDefaultToolkit().createImage(bytes));
            screen.createGraphics().drawImage(i, 0, 0, null);
        }
        if (body[2].hashCode()=="part".hashCode())
        {
            int x = (int) Double.parseDouble(body[3]);
            int y = (int) Double.parseDouble(body[4]);
            Image i = makeGoodImage(Toolkit.getDefaultToolkit().createImage(bytes));
            screen.getGraphics().drawImage(i, x, y, null);
        }

        jLabel10.setIcon(new ImageIcon(screen));
    }

    // DirectTransfer

    public void sendDone()
    {
        jLabel4.setText("Передача завершена.");
        jProgressBar1.setMaximum(100);
        jProgressBar1.setValue(100);
    }

    public void sendProgress(long sent, long size, int speed)
    {
        jLabel4.setText("Передано: "+bestSize(sent)+"/"+bestSize(size)+", скорость: "+speed+" Кб/сек");
        jProgressBar1.setMaximum((int) (size / 1024));
        jProgressBar1.setValue((int) (sent / 1024));
    }

    public void receiveDone()
    {
        jLabel5.setText("Прием завершен.");
        jProgressBar2.setMaximum(100);
        jProgressBar2.setValue(100);

        jTabbedPane1.setSelectedIndex(3);
        this.setExtendedState(javax.swing.JFrame.NORMAL);
        this.toFront();
        this.requestFocus();
        playSoundFromResource("/sound/login.wav");
    }

    public void receiveProgress(long got, long size, int speed)
    {
        jLabel5.setText("Получено "+bestSize(got)+"/"+bestSize(size)+", скорость: "+speed+" Кб/сек");
        jProgressBar2.setMaximum((int) (size / 1024));
        jProgressBar2.setValue((int) (got / 1024));
    }

    // ScreenStreaming

    public void screenUpdated(BufferedImage i)
    {
        jLabel10.setIcon(new ImageIcon(i));
        jLabel10.setSize(jLabel10.getIcon().getIconWidth(), jLabel10.getIcon().getIconHeight());
    }

}
